/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from "./schema/context"
import * as prisma from "./node_modules/.prisma/client/index"
import { core, connectionPluginCore } from "@nexus/schema"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    connectionField<FieldName extends string>(
            fieldName: FieldName, 
            config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> 
          ): void
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BlogPostOrderBy: { // input type
    createdAt?: NexusGenEnums['OrderBy'] | null; // OrderBy
    updatedAt?: NexusGenEnums['OrderBy'] | null; // OrderBy
  }
}

export interface NexusGenEnums {
  OrderBy: "asc" | "desc"
}

export interface NexusGenRootTypes {
  BlogPost: prisma.BlogPost;
  BlogPostConnection: { // root type
    edges?: Array<NexusGenRootTypes['BlogPostEdge'] | null> | null; // [BlogPostEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  BlogPostEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['BlogPost']; // BlogPost!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  User: prisma.User;
  UserConnection: { // root type
    edges?: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  Viewer: {};
  Node: NexusGenRootTypes['BlogPost'] | NexusGenRootTypes['User'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BlogPostOrderBy: NexusGenInputs['BlogPostOrderBy'];
  OrderBy: NexusGenEnums['OrderBy'];
}

export interface NexusGenFieldTypes {
  BlogPost: { // field return type
    content: string; // String!
    createdAt: any; // DateTime!
    id: string; // ID!
    title: string; // String!
    updatedAt: any; // DateTime!
  }
  BlogPostConnection: { // field return type
    edges: Array<NexusGenRootTypes['BlogPostEdge'] | null> | null; // [BlogPostEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  BlogPostEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['BlogPost']; // BlogPost!
  }
  Mutation: { // field return type
    createBlogPost: NexusGenRootTypes['BlogPost']; // BlogPost!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    node: NexusGenRootTypes['Node']; // Node!
    viewer: NexusGenRootTypes['Viewer']; // Viewer!
  }
  User: { // field return type
    createdAt: any; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    updatedAt: any; // DateTime!
  }
  UserConnection: { // field return type
    edges: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  Viewer: { // field return type
    allBlogPosts: NexusGenRootTypes['BlogPostConnection']; // BlogPostConnection!
    allUsers: NexusGenRootTypes['UserConnection']; // UserConnection!
    BlogPost: NexusGenRootTypes['BlogPost']; // BlogPost!
    User: NexusGenRootTypes['User']; // User!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBlogPost: { // args
      content: string; // String!
      title: string; // String!
    }
  }
  Query: {
    node: { // args
      id: string; // String!
    }
  }
  Viewer: {
    allBlogPosts: { // args
      after?: string | null; // String
      first: number; // Int!
      orderBy?: NexusGenInputs['BlogPostOrderBy'] | null; // BlogPostOrderBy
    }
    allUsers: { // args
      after?: string | null; // String
      first: number; // Int!
    }
    BlogPost: { // args
      id: string; // String!
    }
    User: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Node: "BlogPost" | "User"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "BlogPost" | "BlogPostConnection" | "BlogPostEdge" | "Mutation" | "PageInfo" | "Query" | "User" | "UserConnection" | "UserEdge" | "Viewer";

export type NexusGenInputNames = "BlogPostOrderBy";

export type NexusGenEnumNames = "OrderBy";

export type NexusGenInterfaceNames = "Node";

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
}